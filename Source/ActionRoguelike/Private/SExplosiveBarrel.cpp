// Fill out your copyright notice in the Description page of Project Settings.


#include "SExplosiveBarrel.h"

#include "SAttributeComponent.h"
#include "PhysicsEngine/RadialForceComponent.h"

// Sets default values
ASExplosiveBarrel::ASExplosiveBarrel()
{
	// It is generated by the code template.
 	// Set this actor to call Tick() every frame.  You can turn this off to improve performance if you don't need it.
	// PrimaryActorTick.bCanEverTick = true;
	this->MeshComp = CreateDefaultSubobject<UStaticMeshComponent>("MeshComp");
		this->MeshComp->SetSimulatePhysics(true);
	// The change of profile will be done automatically in Blueprint, while it must be done manually in C++.
	this->MeshComp->SetCollisionProfileName(UCollisionProfile::PhysicsActor_ProfileName);
	RootComponent = MeshComp;

	this->ForceComp = CreateDefaultSubobject<URadialForceComponent>("ForceComp");
	this->ForceComp->SetupAttachment(MeshComp);
	// If it is true, it will constantly impose impulse in every tick.
	// We replace it with FireImpulse() which is triggered by event.
	this->ForceComp->SetAutoActivate(false);
	this->ForceComp->Radius = 750.0f;
	this->ForceComp->ImpulseStrength = 2500.0f;
	// If true, the impulse will ignore mass of objects and will always result in a fixed velocity change.
	this->ForceComp->bImpulseVelChange = true;
	// By default, Pawn, PhysicsBody, Vehicle and Destructible are added.
	this->ForceComp->AddCollisionChannelToAffect(ECC_WorldDynamic);

	AttributeComp = CreateDefaultSubobject<USAttributeComponent>("AttributeComp");
}

// Called when the game starts or when spawned
void ASExplosiveBarrel::BeginPlay()
{
	Super::BeginPlay();
	
}

// Allow actors to initialize themselves on the C++ side after all of their components have been initialized,
// only called during gameplay.
void ASExplosiveBarrel::PostInitializeComponents() {
	Super::PostInitializeComponents();
	// OnComponentHit will be triggered when the component hits or is hit.
	// AddDynamic is a kind of delegates.
	// this->MeshComp->OnComponentHit.AddDynamic(this, &ASExplosiveBarrel::OnActorHit);
	this->MeshComp->OnComponentBeginOverlap.AddDynamic(this, &ASExplosiveBarrel::OnActorOverlap);

	AttributeComp->OnHealthChanged.AddDynamic(this, &ASExplosiveBarrel::OnHealthChanged);
}

void ASExplosiveBarrel::OnHealthChanged(AActor* InstigatorActor, USAttributeComponent* OwningComp, float NewHealth,
	float Delta) {
	ForceComp->FireImpulse();

	UE_LOG(LogTemp, Log, TEXT("Hi"));

	if (IsValid(InstigatorActor)) {
		USAttributeComponent *AttributeComponent = Cast<USAttributeComponent>(
			InstigatorActor->GetComponentByClass(USAttributeComponent::StaticClass())
			);
		if (IsValid(AttributeComponent)) {
			AttributeComponent->ApplyHealthChange(-50.0f);
		}
	}
}

// Called every frame
void ASExplosiveBarrel::Tick(float DeltaTime)
{
	Super::Tick(DeltaTime);

}

/*void ASExplosiveBarrel::OnActorHit(UPrimitiveComponent* HitComponent, AActor* OtherActor, UPrimitiveComponent* OtherComp,
	FVector NormalImpulse, const FHitResult& Hit) {
	// It will fire a single impulse.
	// ForceComp->FireImpulse();

	UE_LOG(LogTemp, Log, TEXT("Hi"));
	// It will have some log functions.
	FString CombinedString = FString::Printf(TEXT("Hit at location: %s"), *Hit.ImpactPoint.ToString());
	DrawDebugString(GetWorld(), Hit.ImpactPoint, CombinedString, nullptr, FColor::Green, 2.0f, true);

	if (IsValid(OtherActor)) {
		USAttributeComponent *AttributeComponent = Cast<USAttributeComponent>(
			OtherActor->GetComponentByClass(USAttributeComponent::StaticClass())
			);
		if (IsValid(AttributeComponent)) {
			AttributeComponent->ApplyHealthChange(-50.0f);
		}
	}
	
}*/

void ASExplosiveBarrel::OnActorOverlap(UPrimitiveComponent* OverlappedComponent, AActor* OtherActor,
	UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const FHitResult& SweepResult) {
	// It will fire a single impulse.
	AttributeComp->ApplyHealthChange(-100.0f);
}
